openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: https://localhost:8443
    description: Generated server url
tags:
  - name: Users
    description: User management API
  - name: Books
    description: Book management API
  - name: Loans
    description: Loan management API
paths:
  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      tags:
        - Users
      summary: Update user
      description: Update the user's username and/or email.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDTO'
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user account by their ID.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /api/loans/{id}:
    get:
      tags:
        - Loans
      summary: Get loan by ID
      description: Retrieve a specific loan by its ID.
      operationId: getLoanById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Loan found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
        '404':
          description: Loan not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
    put:
      tags:
        - Loans
      summary: Update a loan
      operationId: updateLoan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanUpdateDTO'
        required: true
      responses:
        '200':
          description: Loan updated
        '403':
          description: Forbidden
        '404':
          description: Loan not found
    delete:
      tags:
        - Loans
      summary: Delete a loan
      operationId: deleteLoan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Loan deleted
        '403':
          description: Forbidden
        '404':
          description: Loan not found
  /api/books/{id}:
    get:
      tags:
        - Books
      summary: Get book by ID
      description: Returns a book by its ID
      operationId: getBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
        '404':
          description: Book not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
    put:
      tags:
        - Books
      summary: Update book
      description: Updates a book's details
      operationId: updateBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdateDTO'
        required: true
      responses:
        '200':
          description: Book updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
        '404':
          description: Book not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
    delete:
      tags:
        - Books
      summary: Delete book
      description: Deletes a book by its ID
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted
          content:
            '*/*':
              schema:
                type: object
  /api/books/{id}/cover:
    get:
      tags:
        - Books
      summary: Download book cover
      description: Downloads the cover image of a book
      operationId: downloadCover
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Image found
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '404':
          description: Book or image not found
          content:
            '*/*':
              schema:
                type: string
                format: binary
    put:
      tags:
        - Books
      summary: Replace book cover
      description: Replaces the cover image of a book
      operationId: replaceCover
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
              required:
                - imageFile
      responses:
        '204':
          description: Image replaced
          content:
            '*/*':
              schema:
                type: object
        '404':
          description: Book not found
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - Books
      summary: Upload book cover
      description: Uploads a cover image for a book
      operationId: uploadBookCover
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Image uploaded
        '404':
          description: Book not found
        '500':
          description: Error uploading image
    delete:
      tags:
        - Books
      summary: Delete book cover
      description: Deletes the cover image of a book
      operationId: deleteCover
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Image deleted
          content:
            '*/*':
              schema:
                type: object
        '404':
          description: Book not found
          content:
            '*/*':
              schema:
                type: object
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users.
      operationId: getAllUsers
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Register a new user with a username, email and rawPassword.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDTO'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid user data or email already in use
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/users/verify-password:
    post:
      tags:
        - Users
      summary: Verify rawPassword
      description: Verify the current rawPassword of the logged-in user.
      operationId: verifyPassword
      parameters:
        - name: currentPassword
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Password verification result
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        '401':
          description: User not authenticated
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/users/update-username:
    post:
      tags:
        - Users
      summary: Update username
      description: Update the username of the currently logged-in user.
      operationId: updateUsername
      parameters:
        - name: newUsername
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Username updated successfully
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        '400':
          description: New username is empty or invalid
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/users/update-password:
    post:
      tags:
        - Users
      summary: Update rawPassword
      description: Change the rawPassword of the currently logged-in user.
      operationId: updatePassword
      parameters:
        - name: currentPassword
          in: query
          required: true
          schema:
            type: string
        - name: newPassword
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Password updated successfully
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        '400':
          description: Current rawPassword is invalid
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/loans:
    get:
      tags:
        - Loans
      summary: Get all loans
      description: Retrieve a paginated list of all loans.
      operationId: getAllLoans
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Loans retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
    post:
      tags:
        - Loans
      summary: Create loan
      description: Create a new loan between a lender and borrower for a book.
      operationId: createLoan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanCreateDTO'
        required: true
      responses:
        '201':
          description: Loan created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
        '404':
          description: Book or user not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
  /api/books:
    get:
      tags:
        - Books
      summary: Get all books
      description: >-
        Returns a paginated list of books with optional filtering by title,
        author, or genre.
      operationId: getAllBooks
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: List of books returned
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
    post:
      tags:
        - Books
      summary: Create new book
      description: Creates a new book with the current authenticated user as owner
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreateDTO'
        required: true
      responses:
        '201':
          description: Book created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
  /api/auth/login:
    post:
      tags:
        - auth-rest-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
  /loans/books/{lenderId}:
    get:
      tags:
        - loan-controller
      operationId: getAvailableBooksByLender
      parameters:
        - name: lenderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /api/openlibrary/authors/info:
    get:
      tags:
        - external-author-rest-controller
      operationId: getAuthorInfo
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthorData'
  /api/loans/valid-borrowers:
    get:
      tags:
        - Loans
      summary: Get valid borrowers
      description: Retrieve a list of users eligible to borrow books from the current user.
      operationId: getValidBorrowers
      responses:
        '200':
          description: Borrower list retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '401':
          description: User is not authenticated
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
  /api/books/search:
    get:
      tags:
        - Books
      summary: Search books
      description: Searches books by title, author, or genre
      operationId: searchBooks
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: author
          in: query
          required: false
          schema:
            type: string
        - name: genre
          in: query
          required: false
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Books found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
        '404':
          description: Books not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
  /api/books/books-per-genre:
    get:
      tags:
        - Books
      summary: Books per genre
      description: Returns the number of books grouped by genre
      operationId: getBooksPerGenre
      responses:
        '200':
          description: Genre statistics returned
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /api/auth/check:
    get:
      tags:
        - auth-rest-controller
      operationId: checkToken
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    UserUpdateDTO:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
    LoanUpdateDTO:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          type: string
    BookUpdateDTO:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        description:
          type: string
        genre:
          type: string
        available:
          type: boolean
    BookDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        genre:
          type: string
        description:
          type: string
        available:
          type: boolean
        coverPic:
          type: string
        authorBio:
          type: string
        coverEndpoint:
          type: string
        ownerId:
          type: integer
          format: int64
        ownerName:
          type: string
    UserCreateDTO:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        rawPassword:
          type: string
    LoanCreateDTO:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
        lenderId:
          type: integer
          format: int64
        borrowerId:
          type: integer
          format: int64
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    LoanDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
        lenderId:
          type: integer
          format: int64
        borrowerId:
          type: integer
          format: int64
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          type: string
    BookCreateDTO:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        description:
          type: string
        genre:
          type: string
    AuthRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        authorBio:
          type: string
        description:
          type: string
        available:
          type: boolean
        owner:
          $ref: '#/components/schemas/User'
        genre:
          type: string
          enum:
            - Fiction
            - Non_Fiction
            - Mystery_Thriller
            - SciFi_Fantasy
            - Romance
            - Historical_Fiction
            - Horror
        currentlyOnLoan:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - ROLE_USER
            - ROLE_ADMIN
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        password:
          type: string
          writeOnly: true
        roles:
          type: array
          items:
            type: string
          uniqueItems: true
    AuthorData:
      type: object
      properties:
        name:
          type: string
        birth_date:
          type: string
        top_work:
          type: string
        work_count:
          type: integer
          format: int32
        topWork:
          type: string
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
    PagedModel:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
        page:
          $ref: '#/components/schemas/PageMetadata'
