openapi: 3.1.0
info:
  title: LibroRed API
  description: REST API for LibroRed - Web Application for Book Lending Between Individuals
  contact:
    name: Team 13
    url: https://github.com/medinaymedia
    email: am.juradoc@alumnos.urjc.es
  license:
    name: Apache 2.0
    url: http://springdoc.org
  version: '1.0'
servers:
- url: https://localhost:8443
  description: Development server
tags:
- name: Users
  description: User management API
- name: Books
  description: Book management API
- name: Loans
  description: Loan management API
paths:
  /api/v1/users:
    get:
      tags:
      - Users
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getAllUsers
      responses:
        '200':
          description: Users retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      tags:
      - Users
      summary: Create a new user
      description: Create a new user account
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid user data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/v1/users/{id}:
    get:
      tags:
      - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: User found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      tags:
      - Users
      summary: Update user
      description: Update an existing user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid user data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    delete:
      tags:
      - Users
      summary: Delete user
      description: Delete a user by ID
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /api/v1/books:
    get:
      tags:
      - Books
      summary: Get all books
      description: Retrieve a list of all books
      operationId: getAllBooks
      responses:
        '200':
          description: Books retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
    post:
      tags:
      - Books
      summary: Create a new book
      description: Create a new book entry
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        '201':
          description: Book created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid book data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
  /api/v1/loans:
    get:
      tags:
      - Loans
      summary: Get all loans
      description: Retrieve a list of all loans
      operationId: getAllLoans
      responses:
        '200':
          description: Loans retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoanDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoanDTO'
    post:
      tags:
      - Loans
      summary: Create a new loan
      description: Create a new loan entry
      operationId: createLoan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanDTO'
        required: true
      responses:
        '201':
          description: Loan created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
        '400':
          description: Invalid loan data or business rule violation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
components:
  schemas:
    UserDTO:
      type: object
      description: User data
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
          - ROLE_USER
          - ROLE_ADMIN
    BookDTO:
      type: object
      description: Book data
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        genre:
          type: string
          enum:
          - Fiction
          - Non_Fiction
          - Mystery_Thriller
          - SciFi_Fantasy
          - Romance
          - Historical_Fiction
          - Horror
        description:
          type: string
        hasCoverImage:
          type: boolean
        owner:
          $ref: '#/components/schemas/UserBasicDTO'
    LoanDTO:
      type: object
      description: Loan data
      properties:
        id:
          type: integer
          format: int64
        book:
          $ref: '#/components/schemas/BookBasicDTO'
        lender:
          $ref: '#/components/schemas/UserBasicDTO'
        borrower:
          $ref: '#/components/schemas/UserBasicDTO'
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          type: string
          enum:
          - Active
          - Completed
    UserBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    BookBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string