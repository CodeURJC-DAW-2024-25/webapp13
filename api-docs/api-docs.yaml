openapi: 3.1.0
info:
  title: LibroRed API
  description: REST API for LibroRed - Web Application for Book Lending Between Individuals
  contact:
    name: Team 13
    url: https://github.com/medinaymedia
    email: am.juradoc@alumnos.urjc.es
  license:
    name: Apache 2.0
    url: http://springdoc.org
  version: '1.0'
servers:
- url: https://localhost:8443
  description: Development server
tags:
- name: Authentication
  description: JWT authentication API
- name: User Management
  description: User account management API
- name: Users
  description: User management API
- name: Books
  description: Book management API
- name: Loans
  description: Loan management API
paths:
  /api/v1/users:
    get:
      tags:
      - Users
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getAllUsers
      responses:
        '200':
          description: Users retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      tags:
      - Users
      summary: Create a new user
      description: Create a new user account
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid user data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/v1/users/{id}:
    get:
      tags:
      - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: User found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      tags:
      - Users
      summary: Update user
      description: Update an existing user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid user data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    delete:
      tags:
      - Users
      summary: Delete user
      description: Delete a user by ID
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /api/v1/books:
    get:
      tags:
      - Books
      summary: Get all books
      description: Retrieve a list of all books
      operationId: getAllBooks
      responses:
        '200':
          description: Books retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
    post:
      tags:
      - Books
      summary: Create a new book
      description: Create a new book entry
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        '201':
          description: Book created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid book data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
  /api/auth/login:
    post:
      tags:
      - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Login successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/refresh:
    post:
      tags:
      - Authentication
      summary: Refresh JWT token
      description: Refresh an existing JWT token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
        required: true
      responses:
        '200':
          description: Token refreshed successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/logout:
    post:
      tags:
      - Authentication
      summary: User logout
      description: Logout user and invalidate JWT token
      operationId: logout
      responses:
        '200':
          description: Logout successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LogoutResponse'
  /api/users/verify-password:
    post:
      tags:
      - User Management
      summary: Verify current password
      description: Verify user's current password for account changes
      operationId: verifyPassword
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
              required:
                - currentPassword
      responses:
        '200':
          description: Password verification result
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: User not authenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/users/update-username:
    post:
      tags:
      - User Management
      summary: Update username
      description: Update authenticated user's username
      operationId: updateUsername
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                newUsername:
                  type: string
              required:
                - newUsername
      responses:
        '200':
          description: Username update result
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: User not authenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/users/update-password:
    post:
      tags:
      - User Management
      summary: Update password
      description: Update authenticated user's password
      operationId: updatePassword
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - currentPassword
                - newPassword
      responses:
        '200':
          description: Password update result
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: User not authenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/books:
    get:
      tags:
      - Books
      summary: Get books with pagination
      description: Retrieve paginated list of books with optional filtering
      operationId: getBooksPage
      parameters:
      - name: page
        in: query
        description: Page number (0-based)
        required: false
        schema:
          type: integer
          default: 0
      - name: size
        in: query
        description: Page size
        required: false
        schema:
          type: integer
          default: 6
      - name: genre
        in: query
        description: Filter by genre
        required: false
        schema:
          type: string
      - name: search
        in: query
        description: Search term for title or author
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Books retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookPageResponse'
    post:
      tags:
      - Books
      summary: Create a new book
      description: Create a new book entry (authenticated users only)
      operationId: createBookPost
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookCreateRequest'
        required: true
      responses:
        '201':
          description: Book created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid book data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
        '401':
          description: User not authenticated
  /api/books/{id}/cover:
    get:
      tags:
      - Books
      summary: Get book cover image
      description: Retrieve book cover image by book ID
      operationId: getBookCover
      parameters:
      - name: id
        in: path
        description: Book ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Book cover image
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Book or cover not found
  /api/books/books-per-genre:
    get:
      tags:
      - Books
      summary: Get books count per genre
      description: Retrieve statistics of books per genre
      operationId: getBooksPerGenre
      responses:
        '200':
          description: Books per genre statistics
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
  /api/loans/valid-borrowers:
    get:
      tags:
      - Loans
      summary: Get valid borrowers for authenticated user
      description: Get list of users who can borrow from the authenticated user
      operationId: getValidBorrowersForAuthUser
      responses:
        '200':
          description: Valid borrowers retrieved
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserBasicDTO'
        '401':
          description: User not authenticated
  /api/v1/loans:
    get:
      tags:
      - Loans
      summary: Get all loans
      description: Retrieve a list of all loans
      operationId: getAllLoans
      responses:
        '200':
          description: Loans retrieved successfully
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoanDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoanDTO'
    post:
      tags:
      - Loans
      summary: Create a new loan
      description: Create a new loan entry
      operationId: createLoan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanDTO'
        required: true
      responses:
        '201':
          description: Loan created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
        '400':
          description: Invalid loan data or business rule violation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
        '500':
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoanDTO'
components:
  schemas:
    UserDTO:
      type: object
      description: User data
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
          - ROLE_USER
          - ROLE_ADMIN
    BookDTO:
      type: object
      description: Book data
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        genre:
          type: string
          enum:
          - Fiction
          - Non_Fiction
          - Mystery_Thriller
          - SciFi_Fantasy
          - Romance
          - Historical_Fiction
          - Horror
        description:
          type: string
        hasCoverImage:
          type: boolean
        owner:
          $ref: '#/components/schemas/UserBasicDTO'
    LoanDTO:
      type: object
      description: Loan data
      properties:
        id:
          type: integer
          format: int64
        book:
          $ref: '#/components/schemas/BookBasicDTO'
        lender:
          $ref: '#/components/schemas/UserBasicDTO'
        borrower:
          $ref: '#/components/schemas/UserBasicDTO'
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          type: string
          enum:
          - Active
          - Completed
    UserBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    BookBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
    LoginRequest:
      type: object
      description: Login request data
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      description: Login response with JWT token
      properties:
        token:
          type: string
        refreshToken:
          type: string
        email:
          type: string
        role:
          type: string
    RefreshRequest:
      type: object
      description: Refresh token request
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    LogoutResponse:
      type: object
      description: Logout response
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      description: Error response
      properties:
        error:
          type: string
        message:
          type: string
    ApiResponse:
      type: object
      description: Generic API response
      properties:
        success:
          type: boolean
        message:
          type: string
        error:
          type: string
    BookPageResponse:
      type: object
      description: Paginated book response
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookDTO'
        totalPages:
          type: integer
        totalElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
        hasNext:
          type: boolean
    BookCreateRequest:
      type: object
      description: Book creation request
      properties:
        title:
          type: string
        author:
          type: string
        genre:
          type: string
          enum:
          - Fiction
          - Non_Fiction
          - Mystery_Thriller
          - SciFi_Fantasy
          - Romance
          - Historical_Fiction
          - Horror
        description:
          type: string
        coverImage:
          type: string
          format: binary
      required:
        - title
        - author
        - genre